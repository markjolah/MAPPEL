#!/usr/bin/env python
#
# setup.py - setuptools configuration for Mappel python
# 
# 
#

import os
import os.path
import subprocess

from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext

class CMakeExtension(Extension):
    def __init__(self, name, sourcedir=''):
        Extension.__init__(self, name, sources=[])
        self.sourcedir = os.path.abspath(sourcedir)

class CMakeBuild(build_ext):        
    def run(self):
        for ext in self.extensions:
            self.build_extension(ext)

    def build_extension(self, ext):
        full_path = self.get_ext_fullpath(ext.name)
        file_name = self.get_ext_filename(ext.name)
        build_dir = os.path.abspath(os.path.dirname(full_path))
        package_dir = ext.sourcedir
        cmake_binary_dir = os.path.abspath(ext.sourcedir+"/..")
        
        #print("BuildExtension: ", ext.name)
        #print("FullPath: ", full_path)
        #print("FullName: ", self.get_ext_fullname(ext.name))
        #print("FileName: ", file_name)
        #print("BuildDir: ", build_dir)
        #print("SourceDir: ", ext.sourcedir)
        #print("CmakeBinaryDir: ", cmake_binary_dir)
        
        if not os.path.exists(self.build_lib):
           os.makedirs(self.build_lib)
        subprocess.check_call(['cmake', '--build', 'src/python'], cwd=cmake_binary_dir)
        if not os.path.normpath(package_dir) == os.path.normpath(build_dir) :
            subprocess.check_call(['cmake -E create_symlink cp -v %s %s'%(file_name, full_path)], shell=True, cwd=package_dir)
        
        
kwargs = dict(
    packages=["mappel"],
    ext_modules=[CMakeExtension('_Gauss1DMLE')],
    cmdclass={"build_ext":CMakeBuild},
    setup_requires=['pytest-runner'],
    tests_require=['pytest','hypothesis']
)

setup(**kwargs)
